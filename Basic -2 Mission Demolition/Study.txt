





Follow Cam
요약: 앵그리 버드의 새가 날아가면 카메라가 새를 따라가는 것처럼 구현함
투사체가 발사되면 카메라가 따라감.

상세:
Main Camera에서 static으로 gameobject를 선언해주고
Prefab을 Instantiate할 때 static 오브젝트에 할당해줌

카메라는 해당 static 오브젝트가 null check를 한다
prefab이 오브젝트에 할당되어야 카메라가 쫓아간다.

또한 범위가 벗어나면 카메라 줌아웃으로 해놓음.

해당 인스턴스가 y 값이 너무 높아지면 땅이 보이지 않아 위치를 알 수 없게됨
-> 카메라를 size를 늘려서 보이게끔 한다.

**움직임이 부자연스러워 Lerp(선형 보간)로 카메라 움직임을 구현



**하나만 던지고 끝날 수 없기 때문에 카메라를 다시 원상복구 해야함
해당 Projectile이 sleeping인지 check 
-> sleeping -> 투사체 움직임이 0.02 이하로 떨어지면 sleeping이라고 생각
-> sleeping의 조건은 ProjectSetting-Physics에서 바꿀 수 있음
-> 해당 static 오브젝트를 null로 바꾸어 초기 위치로 카메라 전환






ProjectLine
요약: 앵그리버드처럼 투사체 날아가는 방향을 보여줌.

상셰:
Line Renderer를 사용함 Trail Render와 달리 경로를 저장하기 위해 직접 구현함
Trail Renderer에 있는 기능을 참고하여 구현.(ex Min Distnace between points)
해당 오브젝트의 Position을 일정 거리에 따라 List에 저장하고 Line Renderer를 실행함으로써
Trail을 생성함. 또한 생성된 Trail은 다른 투사체가 발사되기 전까지 유지되어 이전 궤적과 비교하여 쏠 수 있게함
(투사체를 쏠 때 List 초기화됨)






Projectile
요약: 투사체

상세:

**땅에 닿아도 계속 굴러가는 현상
-> collision detection을 discrete에서 cotinuous로 만듬
-> Physical Material도 지정해줌.

**2D지만 Z성분 존재
-> Rigidbody에서 constraints로 freeze position z로 z성분이 변하는 것 방지





Cloud
요약: 구름 한 개

상세:
구름을 만들어 배경효과를 줌과 동시에 정지해있으므로 운동하는 물체에게 속도감을 준다.(Vection)

손수 배치보다 스크립트로 배치함.

Empty 오브젝트를 만들어 그 안에서 Instantiate하려고 함
랜덤 좌표는 Random.insideUnitSphere 로  X^2 + Y^2  + Z^2 <= 1 의 좌표를 얻음
해당 좌표에 Offset을 곱해서 Random 위치를 만듬.
크기는 Scale에 Offset을 곱해서 Random 크기를 만듬

하지만 X값이 크다면 Y 좌표값이 작아지는 현상 발생
-> 최소의 Y값(구름 두께)를 정하고 비교해서 max값 채택.






CloudCrafter 
요약: 구름 여러개

상세:
CloudSphere가 아닌 Cloud로 prefab을 만들어 구름을 여러개 생성함
역시 랜덤으로 position, scale 설정
또한 구름을 움직이게함. 크기가 클수록 빨리 움직임.
-> 3D게임이라면 Z축이 멀수록 느리게 움직이는 Parallax구현가능.



Castle
요약: 투사체를 날려 goal에 닿는데 방해하는 장애물

상세:
직접 배치하여 prefab으로 저장
level에 따라 해당 prefab이 Instantiate하게 구현


